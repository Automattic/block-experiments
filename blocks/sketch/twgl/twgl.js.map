{"version":3,"sources":["webpack://twgl/webpack/universalModuleDefinition","webpack://twgl/webpack/bootstrap","webpack://twgl/./src/attributes.js","webpack://twgl/./src/draw.js","webpack://twgl/./src/framebuffers.js","webpack://twgl/./src/helper.js","webpack://twgl/./src/programs.js","webpack://twgl/./src/textures.js","webpack://twgl/./src/twgl-base.js","webpack://twgl/./src/twgl.js","webpack://twgl/./src/typedarrays.js","webpack://twgl/./src/utils.js","webpack://twgl/./src/vertex-arrays.js"],"names":["STATIC_DRAW","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","BUFFER_SIZE","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","gl","undefined","defaults","attribPrefix","setAttributePrefix","prefix","setDefaults","newDefaults","helper","copyExistingProperties","setBufferFromTypedArray","type","buffer","array","drawType","bindBuffer","bufferData","createBufferFromTypedArray","typedArray","isBuffer","createBuffer","isIndices","name","getNormalizationForTypedArray","Int8Array","Uint8Array","getNormalizationForTypedArrayType","typedArrayType","getArray","length","data","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","test","Error","getNumComponents","arrayName","size","makeTypedArray","typedArrays","isArrayBuffer","Array","isArray","Type","Uint16Array","Float32Array","createAttribsFromArrays","arrays","attribs","Object","keys","forEach","attribName","attrib","value","normalization","WebGLBuffer","normalize","numValues","arrayType","numBytes","BYTES_PER_ELEMENT","getGLTypeForTypedArrayType","getGLTypeForTypedArray","stride","offset","divisor","setAttribInfoBufferFromArray","attribInfo","bufferSubData","getBytesPerValueForGLType","positionKeys","getNumElementsFromNonIndexedArrays","key","ii","numElements","getNumElementsFromAttributes","getBufferParameter","bytesPerValue","totalElements","createBufferInfoFromArrays","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","elementType","createBufferFromArray","createBuffersFromArrays","buffers","TRIANGLES","drawBufferInfo","count","instanceCount","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","drawObjectList","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","object","active","programInfo","vertexArrayInfo","bindBuffers","useProgram","program","vertexArrayObject","bindVertexArray","programs","setBuffersAndAttributes","setUniforms","uniforms","FRAMEBUFFER","RENDERBUFFER","TEXTURE_2D","DEPTH_COMPONENT","RGBA","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_LINEAR","defaultAttachments","format","min","wrap","attachmentsByFormat","getAttachmentPointForFormat","renderbufferFormats","isRenderbufferFormat","createFramebufferInfo","attachments","width","height","target","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","colorAttachmentCount","framebufferInfo","framebuffer","attachmentOptions","attachment","attachmentPoint","createRenderbuffer","bindRenderbuffer","renderbufferStorage","textureOptions","auto","minMag","mag","wrapS","wrapT","textures","createTexture","isRenderbuffer","framebufferRenderbuffer","isTexture","layer","framebufferTextureLayer","level","framebufferTexture2D","texTarget","push","resizeFramebufferInfo","ndx","resizeTexture","bindFramebufferInfo","viewport","copyNamedProperties","names","src","dst","hasOwnProperty","error","console","warn","t","WebGLRenderbuffer","isShader","WebGLShader","WebGLTexture","isSampler","WebGLSampler","getElementById","id","document","TEXTURE0","DYNAMIC_DRAW","UNIFORM_BUFFER","TRANSFORM_FEEDBACK_BUFFER","TRANSFORM_FEEDBACK","COMPILE_STATUS","LINK_STATUS","FRAGMENT_SHADER","VERTEX_SHADER","SEPARATE_ATTRIBS","ACTIVE_UNIFORMS","ACTIVE_ATTRIBUTES","TRANSFORM_FEEDBACK_VARYINGS","ACTIVE_UNIFORM_BLOCKS","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","typeMap","getBindPointForSamplerType","bindPoint","floatSetter","location","v","uniform1f","floatArraySetter","uniform1fv","floatVec2Setter","uniform2fv","floatVec3Setter","uniform3fv","floatVec4Setter","uniform4fv","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","uintSetter","uniform1ui","uintArraySetter","uniform1uiv","uintVec2Setter","uniform2uiv","uintVec3Setter","uniform3uiv","uintVec4Setter","uniform4uiv","floatMat2Setter","uniformMatrix2fv","floatMat3Setter","uniformMatrix3fv","floatMat4Setter","uniformMatrix4fv","floatMat23Setter","uniformMatrix2x3fv","floatMat32Setter","uniformMatrix3x2fv","floatMat24Setter","uniformMatrix2x4fv","floatMat42Setter","uniformMatrix4x2fv","floatMat34Setter","uniformMatrix3x4fv","floatMat43Setter","uniformMatrix4x3fv","samplerSetter","unit","utils","isWebGL2","textureOrPair","texture","sampler","activeTexture","bindTexture","bindSampler","samplerArraySetter","units","Int32Array","index","setter","arraySetter","Uint32Array","floatAttribSetter","b","disableVertexAttribArray","vertexAttrib4fv","vertexAttrib3fv","vertexAttrib2fv","vertexAttrib1fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","rowOffset","i","attrTypeMap","addLineNumbers","lineOffset","split","map","line","join","spaceRE","loadShader","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","replace","compileShader","compiled","getShaderParameter","lastError","getShaderInfoLog","deleteShader","getProgramOptions","opt_attribs","opt_locations","transformFeedbackVaryings","transformFeedbackMode","errorCallback","opt","attribLocations","options","defaultShaderType","getShaderTypeFromScriptType","scriptType","indexOf","deleteShaders","shaders","createProgram","progOptions","realShaders","newShaders","elem","text","attachShader","bindAttribLocation","varyings","linkProgram","linked","getProgramParameter","getProgramInfoLog","deleteProgram","createShaderFromScript","scriptId","opt_shaderType","shaderScript","createProgramFromScripts","shaderScriptIds","createProgramFromSources","shaderSources","isBuiltIn","info","startsWith","createUniformSetters","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","substr","toString","uniformSetters","numUniforms","getActiveUniform","createTransformFeedbackInfo","numVaryings","varying","getTransformFeedbackVarying","bindTransformFeedbackInfo","transformFeedbackInfo","buf","bindBufferRange","bindBufferBase","createTransformFeedback","tf","bindTransformFeedback","createUniformBlockSpecFromProgram","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","getActiveUniformBlockName","blockSpec","usedByVertexShader","getActiveUniformBlockParameter","usedByFragmentShader","used","arraySuffixRE","createUniformBlockInfoFromProgram","uniformBlockSpec","blockName","ArrayBuffer","uniformBufferIndex","uniformBlockBinding","uniformNdx","asFloat","createUniformBlockInfo","bindUniformBlock","uniformBlockInfo","bufferBindIndex","byteLength","setUniformBlock","setBlockUniforms","values","set","setters","actualSetters","numArgs","arguments","aNdx","setUniformsAndBindTextures","createAttributeSetters","attribSetters","numAttribs","getActiveAttrib","getAttribLocation","setAttributes","createProgramInfoFromProgram","createProgramInfo","good","source","script","textureColor","crossOrigin","s_ctx","getShared2DContext","createElement","getContext","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MIN_LOD","TEXTURE_MAX_LOD","TEXTURE_BASE_LEVEL","TEXTURE_MAX_LEVEL","UNPACK_ALIGNMENT","UNPACK_ROW_LENGTH","UNPACK_IMAGE_HEIGHT","UNPACK_SKIP_PIXELS","UNPACK_SKIP_ROWS","UNPACK_SKIP_IMAGES","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_Y_WEBGL","R8","R8_SNORM","R16F","R32F","R8UI","R8I","RG16UI","RG16I","RG32UI","RG32I","RG8","RG8_SNORM","RG16F","RG32F","RG8UI","RG8I","R16UI","R16I","R32UI","R32I","RGB8","SRGB8","RGB8_SNORM","R11F_G11F_B10F","RGB9_E5","RGB16F","RGB32F","RGB8UI","RGB8I","RGB16UI","RGB16I","RGB32UI","RGB32I","RGBA8","SRGB8_ALPHA8","RGBA8_SNORM","RGB10_A2","RGBA16F","RGBA32F","RGBA8UI","RGBA8I","RGB10_A2UI","RGBA16UI","RGBA16I","RGBA32I","RGBA32UI","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","DEPTH24_STENCIL8","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","HALF_FLOAT_OES","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","RG","RG_INTEGER","RED","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","formatInfo","f","numColorComponents","s_textureInternalFormatInfo","getTextureInternalFormatInfo","internalFormat","textureFormat","colorRenderable","textureFilterable","bytesPerElement","bytesPerElementMap","getBytesPerElementForInternalFormat","getFormatAndTypeForInternalFormat","isPowerOf2","canGenerateMipmap","canFilter","getNumComponentsForFormat","getTextureTypeForArrayType","defaultType","guessDimensions","Math","sqrt","setDefaultTextureColor","color","lastPackState","savePackState","colorspaceConversion","getParameter","pixelStorei","premultiplyAlpha","flipY","restorePackState","saveSkipState","unpackAlignment","unpackRowLength","unpackImageHeight","unpackSkipPixels","unpackSkipRows","unpackSkipImages","restoreSkipState","setTextureSamplerParameters","parameteriFn","call","wrapR","minLod","maxLod","baseLevel","maxLevel","setTextureParameters","tex","texParameteri","setSamplerParameters","samplerParameteri","createSampler","createSamplers","samplerOptions","samplers","make1Pixel","setTextureFilteringForSize","generateMipmap","filtering","shouldAutomaticallySetTextureFilteringForSize","getCubeFaceOrder","cubeFaceOrder","getCubeFacesWithNdx","faces","facesWithNdx","face","sort","a","setTextureFromElement","element","formatType","imgWidth","imgHeight","slices","nodeName","ctx","canvas","xOffset","yOffset","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","then","imageBitmap","smallest","largest","max","depth","xMult","yMult","texImage3D","d","srcX","srcY","texSubImage3D","noop","urlIsSameOrigin","url","href","hostname","port","protocol","localOrigin","URL","origin","urlOrigin","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","loadImage","callback","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","msg","addEventListener","ImageBitmap","err","bm","cb","mode","fetch","response","ok","blob","bitmap","setTimeout","e","isTexImageSource","obj","ImageData","HTMLElement","loadAndUseImage","setTextureTo1PixelColor","loadTextureFromUrl","loadCubemapFromUrls","urls","numToLoad","errors","imgs","uploadImg","faceTarget","otherTarget","loadSlicesFromUrls","firstImage","slice","s","setTextureFromArray","getTypedArrayTypeForGLType","Uint8ClampedArray","glEnumToString","dimensions","cbrt","elementsPerElement","faceSize","subarray","setEmptyTexture","isAsyncSrc","createTextures","numDownloading","images","callCallbackIfReady","onLoadFn","addExtensionsToContext","attributes","setAttributeDefaults_","setTextureDefaults_","prefixRE","addExtensionToContext","extensionName","ext","getExtension","enums","fnSuffix","exec","enumSuffix","isFunc","suffix","endsWith","substring","origFn","apply","constructor","supportedExtensions","create3DContext","context","getWebGLContext","createContext","resizeCanvasToDisplaySize","multiplier","clientWidth","clientHeight","glTypeToTypedArray","tt","Int16Array","CTOR","SharedArrayBuffer","isArrayBufferOrSharedArrayBuffer","texStorage2D","isWebGL1","haveEnumsForType","addEnums","existing","createVertexArrayInfo","programInfos","vao","createVertexArray","createVAOAndSetAttributes","createVAOFromBufferInfo"],"mappings":"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","file":"twgl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twgl\"] = factory();\n\telse\n\t\troot[\"twgl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/twgl-base.js\");\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as typedArrays from './typedarrays.js';\nimport * as helper from './helper.js';\n\nconst STATIC_DRAW                  = 0x88e4;\nconst ARRAY_BUFFER                 = 0x8892;\nconst ELEMENT_ARRAY_BUFFER         = 0x8893;\nconst BUFFER_SIZE                  = 0x8764;\n\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT               = 0x1403;\nconst INT                          = 0x1404;\nconst UNSIGNED_INT                 = 0x1405;\nconst FLOAT                        = 0x1406;\n\n/**\n * Low level attribute and buffer related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/attributes\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */ /* lgtm [js/unused-local-variable] */\nconst defaults = {\n  attribPrefix: \"\",\n};\n\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n * In other words I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || STATIC_DRAW);\n}\n\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (helper.isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n  type = type || ARRAY_BUFFER;\n  const buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\n// This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)    { return true; }  // eslint-disable-line\n  if (typedArrayType === Uint8Array)   { return true; }  // eslint-disable-line\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nconst texcoordRE = /coord|texture/i;\nconst colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  let numComponents;\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3;  // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw new Error(`Can not guess numComponents for attribute '${name}'. Tried ${numComponents} but ${length} values is not evenly divisible by ${numComponents}. You should specify it.`);\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (typedArrays.isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (typedArrays.isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array,\n    };\n  }\n\n  let Type = array.type;\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n  return new Type(array.data);\n}\n\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of components of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\nfunction createAttribsFromArrays(gl, arrays) {\n  const attribs = {};\n  Object.keys(arrays).forEach(function(arrayName) {\n    if (!isIndices(arrayName)) {\n      const array = arrays[arrayName];\n      const attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);\n      if (array.value) {\n        if (!Array.isArray(array.value) && !typedArrays.isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n        attribs[attribName] = {\n          value: array.value,\n        };\n      } else {\n        let buffer;\n        let type;\n        let normalization;\n        let numComponents;\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          const numValues = array.data || array;\n          const arrayType = array.type || Float32Array;\n          const numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = typedArrays.getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(ARRAY_BUFFER, buffer);\n          gl.bufferData(ARRAY_BUFFER, numBytes, array.drawType || STATIC_DRAW);\n        } else {\n          const typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = typedArrays.getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n        attribs[attribName] = {\n          buffer:        buffer,\n          numComponents: numComponents,\n          type:          type,\n          normalize:     normalization,\n          stride:        array.stride || 0,\n          offset:        array.offset || 0,\n          divisor:       array.divisor === undefined ? undefined : array.divisor,\n          drawType:      array.drawType,\n        };\n      }\n    }\n  });\n  gl.bindBuffer(ARRAY_BUFFER, null);\n  return attribs;\n}\n\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically update the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably inefficient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n  if (offset !== undefined) {\n    gl.bindBuffer(ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === BYTE)           return 1;  // eslint-disable-line\n  if (type === UNSIGNED_BYTE)  return 1;  // eslint-disable-line\n  if (type === SHORT)          return 2;  // eslint-disable-line\n  if (type === UNSIGNED_SHORT) return 2;  // eslint-disable-line\n  if (type === INT)            return 4;  // eslint-disable-line\n  if (type === UNSIGNED_INT)   return 4;  // eslint-disable-line\n  if (type === FLOAT)          return 4;  // eslint-disable-line\n  return 0;\n}\n\n// Tries to get the number of elements from a set of arrays.\nconst positionKeys = ['position', 'positions', 'a_position'];\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in arrays) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n  const array = arrays[key];\n  const length = getArray(array).length;\n  const numComponents = getNumComponents(array, key);\n  const numElements = length / numComponents;\n  if (length % numComponents > 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  let key;\n  let ii;\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n    if (key in attribs) {\n      break;\n    }\n    key = defaults.attribPrefix + key;\n    if (key in attribs) {\n      break;\n    }\n  }\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n  const attrib = attribs[key];\n  gl.bindBuffer(ARRAY_BUFFER, attrib.buffer);\n  const numBytes = gl.getBufferParameter(ARRAY_BUFFER, BUFFER_SIZE);\n  gl.bindBuffer(ARRAY_BUFFER, null);\n\n  const bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  const totalElements = numBytes / bytesPerValue;\n  const numComponents = attrib.numComponents || attrib.size;\n  // TODO: check stride\n  const numElements = totalElements / numComponents;\n  if (numElements % 1 !== 0) {\n    throw new Error(`numComponents ${numComponents} not correct for length ${length}`);\n  }\n  return numElements;\n}\n\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs appropriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         position: { buffer: WebGLBuffer, numComponents: 3, },\n *         normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also be TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or AugmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         texcoord: { numComponents: 2, buffer: gl.createBuffer(), },\n *         normal: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specified overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  const newAttribs = createAttribsFromArrays(gl, arrays);\n  const bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  const indices = arrays.indices;\n  if (indices) {\n    const newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that contains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be derived otherwise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\nfunction createBufferFromArray(gl, array, arrayName) {\n  const type = arrayName === \"indices\" ? ELEMENT_ARRAY_BUFFER : ARRAY_BUFFER;\n  const typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\nfunction createBuffersFromArrays(gl, arrays) {\n  const buffers = { };\n  Object.keys(arrays).forEach(function(key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  });\n\n  // Ugh!\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\nexport {\n  createAttribsFromArrays,\n  createBuffersFromArrays,\n  createBufferFromArray,\n  createBufferFromTypedArray,\n  createBufferInfoFromArrays,\n  setAttribInfoBufferFromArray,\n\n  setAttributePrefix,\n\n  setDefaults as setAttributeDefaults_,\n  getNumComponents as getNumComponents_,\n  getArray as getArray_,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as programs from './programs.js';\n\nconst TRIANGLES                      = 0x0004;\nconst UNSIGNED_SHORT                 = 0x1403;\n\n/**\n * Drawing related functions\n *\n * For backward compatibility they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? TRIANGLES : type;\n  const indices = bufferInfo.indices;\n  const elementType = bufferInfo.elementType;\n  const numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In other words `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\nfunction drawObjectList(gl, objectsToDraw) {\n  let lastUsedProgramInfo = null;\n  let lastUsedBufferInfo = null;\n\n  objectsToDraw.forEach(function(object) {\n    if (object.active === false) {\n      return;\n    }\n\n    const programInfo = object.programInfo;\n    const bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    let bindBuffers = false;\n    const type = object.type === undefined ? TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program);\n\n      // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n      bindBuffers = true;\n    }\n\n    // Setup all the needed attributes.\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n      lastUsedBufferInfo = bufferInfo;\n      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    }\n\n    // Set the uniforms.\n    programs.setUniforms(programInfo, object.uniforms);\n\n    // Draw\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\nexport {\n  drawBufferInfo,\n  drawObjectList,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as textures from './textures.js';\nimport * as helper from './helper.js';\n\n/**\n * Framebuffer related functions\n *\n * For backward compatibility they are available at both `twgl.framebuffer` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/framebuffers\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */ /* lgtm [js/unused-local-variable] */\n\nconst FRAMEBUFFER                    = 0x8d40;\nconst RENDERBUFFER                   = 0x8d41;\nconst TEXTURE_2D                     = 0x0de1;\n\nconst UNSIGNED_BYTE                  = 0x1401;\n\n/* PixelFormat */\nconst DEPTH_COMPONENT                = 0x1902;\nconst RGBA                           = 0x1908;\n\n/* Framebuffer Object. */\nconst RGBA4                          = 0x8056;\nconst RGB5_A1                        = 0x8057;\nconst RGB565                         = 0x8D62;\nconst DEPTH_COMPONENT16              = 0x81A5;\nconst STENCIL_INDEX                  = 0x1901;\nconst STENCIL_INDEX8                 = 0x8D48;\nconst DEPTH_STENCIL                  = 0x84F9;\nconst COLOR_ATTACHMENT0              = 0x8CE0;\nconst DEPTH_ATTACHMENT               = 0x8D00;\nconst STENCIL_ATTACHMENT             = 0x8D20;\nconst DEPTH_STENCIL_ATTACHMENT       = 0x821A;\n\n/* TextureWrapMode */\nconst REPEAT                         = 0x2901;  // eslint-disable-line\nconst CLAMP_TO_EDGE                  = 0x812F;\nconst MIRRORED_REPEAT                = 0x8370;  // eslint-disable-line\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;  // eslint-disable-line\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\nconst NEAREST_MIPMAP_NEAREST         = 0x2700;  // eslint-disable-line\nconst LINEAR_MIPMAP_NEAREST          = 0x2701;  // eslint-disable-line\nconst NEAREST_MIPMAP_LINEAR          = 0x2702;  // eslint-disable-line\nconst LINEAR_MIPMAP_LINEAR           = 0x2703;  // eslint-disable-line\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attach] The attachment point. Defaults\n *   to `gl.COLOR_ATTACHMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {number} [layer] layer for `gl.framebufferTextureLayer`. Defaults to undefined.\n *   If set then `gl.framebufferTextureLayer` is called, if not then `gl.framebufferTexture2D`\n * @property {WebGLObject} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachments across framebuffers.\n * @memberOf module:twgl\n * @mixes module:twgl.TextureOptions\n */\n\nconst defaultAttachments = [\n  { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },\n  { format: DEPTH_STENCIL, },\n];\n\nconst attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format) {\n  return attachmentsByFormat[format];\n}\n\nconst renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @property {number} width The width of the framebuffer and its attachments\n * @property {number} height The width of the framebuffer and its attachments\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL1 only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  const target = FRAMEBUFFER;\n  const fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  let colorAttachmentCount = 0;\n  const framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height,\n  };\n  attachments.forEach(function(attachmentOptions) {\n    let attachment = attachmentOptions.attachment;\n    const format = attachmentOptions.format;\n    let attachmentPoint = getAttachmentPointForFormat(format);\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n    }\n    if (!attachment) {\n      if (isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(RENDERBUFFER, attachment);\n        gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n      } else {\n        const textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || CLAMP_TO_EDGE;\n        }\n        attachment = textures.createTexture(gl, textureOptions);\n      }\n    }\n    if (helper.isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, RENDERBUFFER, attachment);\n    } else if (helper.isTexture(gl, attachment)) {\n      if (attachmentOptions.layer !== undefined) {\n        gl.framebufferTextureLayer(\n          target,\n          attachmentPoint,\n          attachment,\n          attachmentOptions.level || 0,\n          attachmentOptions.layer);\n      } else {\n        gl.framebufferTexture2D(\n            target,\n            attachmentPoint,\n            attachmentOptions.texTarget || TEXTURE_2D,\n            attachment,\n            attachmentOptions.level || 0);\n      }\n    } else {\n      throw new Error('unknown attachment type');\n    }\n    framebufferInfo.attachments.push(attachment);\n  });\n  return framebufferInfo;\n}\n\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Default = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width  = width  || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function(attachmentOptions, ndx) {\n    const attachment = framebufferInfo.attachments[ndx];\n    const format = attachmentOptions.format;\n    if (helper.isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(RENDERBUFFER, attachment);\n      gl.renderbufferStorage(RENDERBUFFER, format, width, height);\n    } else if (helper.isTexture(gl, attachment)) {\n      textures.resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw new Error('unknown attachment type');\n    }\n  });\n}\n\n/**\n * Binds a framebuffer\n *\n * This function pretty much solely exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo|null} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If falsy will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || FRAMEBUFFER;\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\nexport {\n  bindFramebufferInfo,\n  createFramebufferInfo,\n  resizeFramebufferInfo,\n};\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function(name) {\n    const value = src[name];\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function(key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {  /* eslint no-prototype-builtins: 0 */\n      dst[key] = src[key];\n    }\n  });\n}\n\nfunction error(...args) {\n  console.error(...args);\n}\n\nfunction warn(...args) {\n  console.warn(...args);\n}\n\nfunction isBuffer(gl, t) {\n  return typeof WebGLBuffer !== 'undefined' && t instanceof WebGLBuffer;\n}\n\nfunction isRenderbuffer(gl, t) {\n  return typeof WebGLRenderbuffer !== 'undefined' && t instanceof WebGLRenderbuffer;\n}\n\nfunction isShader(gl, t) {\n  return typeof WebGLShader !== 'undefined' && t instanceof WebGLShader;\n}\n\nfunction isTexture(gl, t) {\n  return typeof WebGLTexture !== 'undefined' && t instanceof WebGLTexture;\n}\n\nfunction isSampler(gl, t) {\n  return typeof WebGLSampler !== 'undefined' && t instanceof WebGLSampler;\n}\n\nexport {\n  copyExistingProperties,\n  copyNamedProperties,\n  error,\n  warn,\n  isBuffer,\n  isRenderbuffer,\n  isShader,\n  isTexture,\n  isSampler,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport * as helper from './helper.js';\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\n\nconst error = helper.error;\nconst warn = helper.warn;\nfunction getElementById(id) {\n  return (typeof document !== 'undefined' && document.getElementById)\n      ? document.getElementById(id)\n      : null;\n}\n\nconst TEXTURE0                       = 0x84c0;\nconst DYNAMIC_DRAW                   = 0x88e8;\n\nconst ARRAY_BUFFER                   = 0x8892;\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\nconst UNIFORM_BUFFER                 = 0x8a11;\nconst TRANSFORM_FEEDBACK_BUFFER      = 0x8c8e;\n\nconst TRANSFORM_FEEDBACK             = 0x8e22;\n\nconst COMPILE_STATUS                 = 0x8b81;\nconst LINK_STATUS                    = 0x8b82;\nconst FRAGMENT_SHADER                = 0x8b30;\nconst VERTEX_SHADER                  = 0x8b31;\nconst SEPARATE_ATTRIBS               = 0x8c8d;\n\nconst ACTIVE_UNIFORMS                = 0x8b86;\nconst ACTIVE_ATTRIBUTES              = 0x8b89;\nconst TRANSFORM_FEEDBACK_VARYINGS    = 0x8c83;\nconst ACTIVE_UNIFORM_BLOCKS          = 0x8a36;\nconst UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = 0x8a44;\nconst UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8a46;\nconst UNIFORM_BLOCK_DATA_SIZE                     = 0x8a40;\nconst UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = 0x8a43;\n\nconst FLOAT                         = 0x1406;\nconst FLOAT_VEC2                    = 0x8B50;\nconst FLOAT_VEC3                    = 0x8B51;\nconst FLOAT_VEC4                    = 0x8B52;\nconst INT                           = 0x1404;\nconst INT_VEC2                      = 0x8B53;\nconst INT_VEC3                      = 0x8B54;\nconst INT_VEC4                      = 0x8B55;\nconst BOOL                          = 0x8B56;\nconst BOOL_VEC2                     = 0x8B57;\nconst BOOL_VEC3                     = 0x8B58;\nconst BOOL_VEC4                     = 0x8B59;\nconst FLOAT_MAT2                    = 0x8B5A;\nconst FLOAT_MAT3                    = 0x8B5B;\nconst FLOAT_MAT4                    = 0x8B5C;\nconst SAMPLER_2D                    = 0x8B5E;\nconst SAMPLER_CUBE                  = 0x8B60;\nconst SAMPLER_3D                    = 0x8B5F;\nconst SAMPLER_2D_SHADOW             = 0x8B62;\nconst FLOAT_MAT2x3                  = 0x8B65;\nconst FLOAT_MAT2x4                  = 0x8B66;\nconst FLOAT_MAT3x2                  = 0x8B67;\nconst FLOAT_MAT3x4                  = 0x8B68;\nconst FLOAT_MAT4x2                  = 0x8B69;\nconst FLOAT_MAT4x3                  = 0x8B6A;\nconst SAMPLER_2D_ARRAY              = 0x8DC1;\nconst SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;\nconst SAMPLER_CUBE_SHADOW           = 0x8DC5;\nconst UNSIGNED_INT                  = 0x1405;\nconst UNSIGNED_INT_VEC2             = 0x8DC6;\nconst UNSIGNED_INT_VEC3             = 0x8DC7;\nconst UNSIGNED_INT_VEC4             = 0x8DC8;\nconst INT_SAMPLER_2D                = 0x8DCA;\nconst INT_SAMPLER_3D                = 0x8DCB;\nconst INT_SAMPLER_CUBE              = 0x8DCC;\nconst INT_SAMPLER_2D_ARRAY          = 0x8DCF;\nconst UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;\nconst UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;\nconst UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;\nconst UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\n\nconst TEXTURE_2D                    = 0x0DE1;\nconst TEXTURE_CUBE_MAP              = 0x8513;\nconst TEXTURE_3D                    = 0x806F;\nconst TEXTURE_2D_ARRAY              = 0x8C1A;\n\nconst typeMap = {};\n\n/**\n * Returns the corresponding bind point for a given sampler type\n */\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n}\n\n// This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\nfunction floatSetter(gl, location) {\n  return function(v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function(v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function(v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function(v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function(v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function(v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function(v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function(v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  return utils.isWebGL2(gl) ? function(textureOrPair) {\n    let texture;\n    let sampler;\n    if (helper.isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function(texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  const bindPoint = getBindPointForSamplerType(gl, type);\n  const units = new Int32Array(size);\n  for (let ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return utils.isWebGL2(gl) ? function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(textureOrPair, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      let texture;\n      let sampler;\n      if (helper.isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function(textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function(texture, index) {\n      gl.activeTexture(TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };\ntypeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  };\ntypeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  };\ntypeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  };\ntypeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    };\ntypeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    };\ntypeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    };\ntypeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };\ntypeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   };\ntypeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   };\ntypeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   };\ntypeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };\ntypeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    };\ntypeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    };\ntypeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    };\ntypeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 16, setter: floatMat2Setter,  };\ntypeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 36, setter: floatMat3Setter,  };\ntypeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  };\ntypeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 24, setter: floatMat23Setter, };\ntypeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, };\ntypeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 24, setter: floatMat32Setter, };\ntypeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, };\ntypeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 32, setter: floatMat42Setter, };\ntypeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 48, setter: floatMat43Setter, };\ntypeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };\n\nfunction floatAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      switch (b.value.length) {\n        case 4:\n          gl.vertexAttrib4fv(index, b.value);\n          break;\n        case 3:\n          gl.vertexAttrib3fv(index, b.value);\n          break;\n        case 2:\n          gl.vertexAttrib2fv(index, b.value);\n          break;\n        case 1:\n          gl.vertexAttrib1fv(index, b.value);\n          break;\n        default:\n          throw new Error('the length of a float constant value must be between 1 and 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(\n          index, b.numComponents || b.size, b.type || FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4iv(index, b.value);\n      } else {\n        throw new Error('The length of an integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || INT, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function(b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      if (b.value.length === 4) {\n        gl.vertexAttrib4uiv(index, b.value);\n      } else {\n        throw new Error('The length of an unsigned integer constant value must be 4!');\n      }\n    } else {\n      gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(\n          index, b.numComponents || b.size, b.type || UNSIGNED_INT, b.stride || 0, b.offset || 0);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  const defaultSize = typeInfo.size;\n  const count = typeInfo.count;\n\n  return function(b) {\n    gl.bindBuffer(ARRAY_BUFFER, b.buffer);\n    const numComponents = b.size || b.numComponents || defaultSize;\n    const size = numComponents / count;\n    const type = b.type || FLOAT;\n    const typeInfo = typeMap[type];\n    const stride = typeInfo.size * numComponents;\n    const normalize = b.normalize || false;\n    const offset = b.offset || 0;\n    const rowOffset = stride / count;\n    for (let i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(\n          index + i, size, type, normalize, stride, offset + rowOffset * i);\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\n\n\nconst attrTypeMap = {};\nattrTypeMap[FLOAT]             = { size:  4, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC2]        = { size:  8, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC3]        = { size: 12, setter: floatAttribSetter, };\nattrTypeMap[FLOAT_VEC4]        = { size: 16, setter: floatAttribSetter, };\nattrTypeMap[INT]               = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC2]          = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC3]          = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[INT_VEC4]          = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[UNSIGNED_INT]      = { size:  4, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC2] = { size:  8, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC3] = { size: 12, setter: uintAttribSetter,  };\nattrTypeMap[UNSIGNED_INT_VEC4] = { size: 16, setter: uintAttribSetter,  };\nattrTypeMap[BOOL]              = { size:  4, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC2]         = { size:  8, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC3]         = { size: 12, setter: intAttribSetter,   };\nattrTypeMap[BOOL_VEC4]         = { size: 16, setter: intAttribSetter,   };\nattrTypeMap[FLOAT_MAT2]        = { size:  4, setter: matAttribSetter,   count: 2, };\nattrTypeMap[FLOAT_MAT3]        = { size:  9, setter: matAttribSetter,   count: 3, };\nattrTypeMap[FLOAT_MAT4]        = { size: 16, setter: matAttribSetter,   count: 4, };\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */ /* lgtm [js/unused-local-variable] */\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\nfunction addLineNumbers(src, lineOffset) {\n  lineOffset = lineOffset || 0;\n  ++lineOffset;\n\n  return src.split(\"\\n\").map(function(line, ndx) {\n    return (ndx + lineOffset) + \": \" + line;\n  }).join(\"\\n\");\n}\n\nconst spaceRE = /^[ \\t]*\\n/;\n\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n * @private\n */\nfunction loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n  const errFn = opt_errorCallback || error;\n  // Create the shader object\n  const shader = gl.createShader(shaderType);\n\n  // Remove the first end of line because WebGL 2.0 requires\n  // #version 300 es\n  // as the first line. No whitespace allowed before that line\n  // so\n  //\n  // <script>\n  // #version 300 es\n  // </script>\n  //\n  // Has one line before it which is invalid according to GLSL ES 3.00\n  //\n  let lineOffset = 0;\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  }\n\n  // Load the shader source\n  gl.shaderSource(shader, shaderSource);\n\n  // Compile the shader\n  gl.compileShader(shader);\n\n  // Check the compile status\n  const compiled = gl.getShaderParameter(shader, COMPILE_STATUS);\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    const lastError = gl.getShaderInfoLog(shader);\n    errFn(addLineNumbers(shaderSource, lineOffset) + \"\\n*** Error compiling shader: \" + lastError);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments passed in\n * @private\n */\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  let transformFeedbackVaryings;\n  let transformFeedbackMode;\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback) {\n      return opt_attribs;\n    }\n    const opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n    transformFeedbackMode = opt.transformFeedbackMode;\n  }\n\n  const options = {\n    errorCallback: opt_errorCallback || error,\n    transformFeedbackVaryings: transformFeedbackVaryings,\n    transformFeedbackMode: transformFeedbackMode,\n  };\n\n  if (opt_attribs) {\n    let attribLocations = {};\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function(attrib,  ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nconst defaultShaderType = [\n  \"VERTEX_SHADER\",\n  \"FRAGMENT_SHADER\",\n];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return VERTEX_SHADER;\n  }\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function(shader) {\n    gl.deleteShader(shader);\n  });\n}\n\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program and calls useProgram.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgram(\n    gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const realShaders = [];\n  const newShaders = [];\n  for (let ndx = 0; ndx < shaders.length; ++ndx) {\n    let shader = shaders[ndx];\n    if (typeof (shader) === 'string') {\n      const elem = getElementById(shader);\n      const src = elem ? elem.text : shader;\n      let type = gl[defaultShaderType[ndx]];\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n      shader = loadShader(gl, src, type, progOptions.errorCallback);\n      newShaders.push(shader);\n    }\n    if (helper.isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    progOptions.errorCallback(\"not enough shaders for program\");\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  const program = gl.createProgram();\n  realShaders.forEach(function(shader) {\n    gl.attachShader(program, shader);\n  });\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function(attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n  let varyings = progOptions.transformFeedbackVaryings;\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || SEPARATE_ATTRIBS);\n  }\n  gl.linkProgram(program);\n\n  // Check the link status\n  const linked = gl.getProgramParameter(program, LINK_STATUS);\n  if (!linked) {\n    // something went wrong with the link\n    const lastError = gl.getProgramInfoLog(program);\n    progOptions.errorCallback(\"Error in program linking:\" + lastError);\n\n    gl.deleteProgram(program);\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n  return program;\n}\n\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\nfunction createShaderFromScript(\n    gl, scriptId, opt_shaderType, opt_errorCallback) {\n  let shaderSource = \"\";\n  const shaderScript = getElementById(scriptId);\n  if (!shaderScript) {\n    throw new Error(`unknown script element: ${scriptId}`);\n  }\n  shaderSource = shaderScript.text;\n\n  const shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n  if (!shaderType) {\n    throw new Error('unknown shader type');\n  }\n\n  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n}\n\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromScripts(\n    gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n    const shader = createShaderFromScript(\n        gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\nfunction createProgramFromSources(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  const shaders = [];\n  for (let ii = 0; ii < shaderSources.length; ++ii) {\n    const shader = loadShader(\n        gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n    if (!shader) {\n      return null;\n    }\n    shaders.push(shader);\n  }\n  return createProgram(gl, shaders, progOptions);\n}\n\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\nfunction isBuiltIn(info) {\n  const name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\nfunction createUniformSetters(gl, program) {\n  let textureUnit = 0;\n\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n  function createUniformSetter(program, uniformInfo) {\n    const location = gl.getUniformLocation(program, uniformInfo.name);\n    const isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === \"[0]\");\n    const type = uniformInfo.type;\n    const typeInfo = typeMap[type];\n    if (!typeInfo) {\n      throw new Error(`unknown type: 0x${type.toString(16)}`); // we should never get here.\n    }\n    let setter;\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      const unit = textureUnit;\n      textureUnit += uniformInfo.size;\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n    setter.location = location;\n    return setter;\n  }\n\n  const uniformSetters = { };\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n        continue;\n    }\n    let name = uniformInfo.name;\n    // remove the array suffix.\n    if (name.substr(-3) === \"[0]\") {\n      name = name.substr(0, name.length - 3);\n    }\n    const setter = createUniformSetter(program, uniformInfo);\n    uniformSetters[name] = setter;\n  }\n  return uniformSetters;\n}\n\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\nfunction createTransformFeedbackInfo(gl, program) {\n  const info = {};\n  const numVaryings = gl.getProgramParameter(program, TRANSFORM_FEEDBACK_VARYINGS);\n  for (let ii = 0; ii < numVaryings; ++ii) {\n    const varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size,\n    };\n  }\n  return info;\n}\n\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n  for (const name in bufferInfo) {\n    const varying = transformFeedbackInfo[name];\n    if (varying) {\n      const buf = bufferInfo[name];\n      if (buf.offset) {\n        gl.bindBufferRange(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  const tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n\n/**\n * @typedef {Object} UniformData\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanatory\n * @property {bool} usedByFragmentShader Self explanatory\n * @property {bool} used Self explanatory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  const numUniforms = gl.getProgramParameter(program, ACTIVE_UNIFORMS);\n  const uniformData = [];\n  const uniformIndices = [];\n\n  for (let ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    const uniformInfo = gl.getActiveUniform(program, ii);\n    if (isBuiltIn(uniformInfo)) {\n      break;\n    }\n    // REMOVE [0]?\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [\n    [ \"UNIFORM_TYPE\", \"type\" ],\n    [ \"UNIFORM_SIZE\", \"size\" ],  // num elements\n    [ \"UNIFORM_BLOCK_INDEX\", \"blockNdx\" ],\n    [ \"UNIFORM_OFFSET\", \"offset\", ],\n  ].forEach(function(pair) {\n    const pname = pair[0];\n    const key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n\n  const blockSpecs = {};\n\n  const numUniformBlocks = gl.getProgramParameter(program, ACTIVE_UNIFORM_BLOCKS);\n  for (let ii = 0; ii < numUniformBlocks; ++ii) {\n    const name = gl.getActiveUniformBlockName(program, ii);\n    const blockSpec = {\n      index: ii,\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, ii, UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    };\n    blockSpec.used = blockSpec.usedByVertexShader || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData,\n  };\n}\n\nconst arraySuffixRE = /\\[\\d+\\]\\.$/;  // better way to check?\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object.<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uniformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  const blockSpecs = uniformBlockSpec.blockSpecs;\n  const uniformData = uniformBlockSpec.uniformData;\n  const blockSpec = blockSpecs[blockName];\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {},\n    };\n  }\n  const array = new ArrayBuffer(blockSpec.size);\n  const buffer = gl.createBuffer();\n  const uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n\n  let prefix = blockName + \".\";\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n  const uniforms = {};\n  blockSpec.uniformIndices.forEach(function(uniformNdx) {\n    const data = uniformData[uniformNdx];\n    const typeInfo = typeMap[data.type];\n    const Type = typeInfo.Type;\n    const length = data.size * typeInfo.size;\n    let name = data.name;\n    if (name.substr(0, prefix.length) === prefix) {\n      name = name.substr(prefix.length);\n    }\n    uniforms[name] = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);\n  });\n  return {\n    name: blockName,\n    array: array,\n    asFloat: new Float32Array(array),  // for debugging\n    buffer: buffer,\n    uniforms: uniforms,\n  };\n}\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n\n/**\n * Binds a uniform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the values into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  const uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  const blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n  if (blockSpec) {\n    const bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(UNIFORM_BUFFER, uniformBlockInfo.array, DYNAMIC_DRAW);\n  }\n}\n\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  const uniforms = uniformBlockInfo.uniforms;\n  for (const name in values) {\n    const array = uniforms[name];\n    if (array) {\n      const value = values[name];\n      if (value.length) {\n        array.set(value);\n      } else {\n        array[0] = value;\n      }\n    }\n  }\n}\n\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n * @memberOf module:twgl/programs\n */\nfunction setUniforms(setters, values) {  // eslint-disable-line\n  const actualSetters = setters.uniformSetters || setters;\n  const numArgs = arguments.length;\n  for (let aNdx = 1; aNdx < numArgs; ++aNdx) {\n    const values = arguments[aNdx];\n    if (Array.isArray(values)) {\n      const numValues = values.length;\n      for (let ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, values[ii]);\n      }\n    } else {\n      for (const name in values) {\n        const setter = actualSetters[name];\n        if (setter) {\n          setter(values[name]);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Alias for `setUniforms`\n * @function\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n * @memberOf module:twgl/programs\n */\nconst setUniformsAndBindTextures = setUniforms;\n\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\nfunction createAttributeSetters(gl, program) {\n  const attribSetters = {\n  };\n\n  const numAttribs = gl.getProgramParameter(program, ACTIVE_ATTRIBUTES);\n  for (let ii = 0; ii < numAttribs; ++ii) {\n    const attribInfo = gl.getActiveAttrib(program, ii);\n    if (isBuiltIn(attribInfo)) {\n        continue;\n    }\n    const index = gl.getAttribLocation(program, attribInfo.name);\n    const typeInfo = attrTypeMap[attribInfo.type];\n    const setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n */\nfunction setAttributes(setters, buffers) {\n  for (const name in buffers) {\n    const setter = setters[name];\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivalent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgramInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n    if (buffers.indices) {\n      gl.bindBuffer(ELEMENT_ARRAY_BUFFER, buffers.indices);\n    }\n  }\n}\n\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @property {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfoFromProgram(gl, program) {\n  const uniformSetters = createUniformSetters(gl, program);\n  const attribSetters = createAttributeSetters(gl, program);\n  const programInfo = {\n    program: program,\n    uniformSetters: uniformSetters,\n    attribSetters: attribSetters,\n  };\n\n  if (utils.isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\nfunction createProgramInfo(\n    gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  const progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  let good = true;\n  shaderSources = shaderSources.map(function(source) {\n    // Lets assume if there is no \\n it's an id\n    if (source.indexOf(\"\\n\") < 0) {\n      const script = getElementById(source);\n      if (!script) {\n        progOptions.errorCallback(\"no element with id: \" + source);\n        good = false;\n      } else {\n        source = script.text;\n      }\n    }\n    return source;\n  });\n  if (!good) {\n    return null;\n  }\n  const program = createProgramFromSources(gl, shaderSources, progOptions);\n  if (!program) {\n    return null;\n  }\n  return createProgramInfoFromProgram(gl, program);\n}\n\nexport {\n  createAttributeSetters,\n\n  createProgram,\n  createProgramFromScripts,\n  createProgramFromSources,\n  createProgramInfo,\n  createProgramInfoFromProgram,\n  createUniformSetters,\n  createUniformBlockSpecFromProgram,\n  createUniformBlockInfoFromProgram,\n  createUniformBlockInfo,\n\n  createTransformFeedback,\n  createTransformFeedbackInfo,\n  bindTransformFeedbackInfo,\n\n  setAttributes,\n  setBuffersAndAttributes,\n  setUniforms,\n  setUniformsAndBindTextures,\n  setUniformBlock,\n  setBlockUniforms,\n  bindUniformBlock,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as utils from './utils.js';\nimport * as typedArrays from './typedarrays.js';\nimport * as helper from './helper.js';\n\n/**\n * Low level texture related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.textures` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/textures\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */ /* lgtm [js/unused-local-variable] */\nconst defaults = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined,\n};\nconst isArrayBuffer = typedArrays.isArrayBuffer;\n\n// Should we make this on demand?\nlet s_ctx;\nfunction getShared2DContext() {\n  s_ctx = s_ctx ||\n      ((typeof document !== 'undefined' && document.createElement)\n        ? document.createElement(\"canvas\").getContext(\"2d\")\n        : null);\n  return s_ctx;\n}\n\n// NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an ImageBitmap to be cut. Unfortunately cutting an ImageBitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\nconst ALPHA                          = 0x1906;\nconst RGB                            = 0x1907;\nconst RGBA                           = 0x1908;\nconst LUMINANCE                      = 0x1909;\nconst LUMINANCE_ALPHA                = 0x190A;\nconst DEPTH_COMPONENT                = 0x1902;\nconst DEPTH_STENCIL                  = 0x84F9;\n\n/* TextureWrapMode */\n// const REPEAT                         = 0x2901;\n// const MIRRORED_REPEAT                = 0x8370;\nconst CLAMP_TO_EDGE                  = 0x812f;\n\n/* TextureMagFilter */\nconst NEAREST                        = 0x2600;\nconst LINEAR                         = 0x2601;\n\n/* TextureMinFilter */\n// const NEAREST_MIPMAP_NEAREST         = 0x2700;\n// const LINEAR_MIPMAP_NEAREST          = 0x2701;\n// const NEAREST_MIPMAP_LINEAR          = 0x2702;\n// const LINEAR_MIPMAP_LINEAR           = 0x2703;\n\n/* Texture Target */\nconst TEXTURE_2D                     = 0x0de1;\nconst TEXTURE_CUBE_MAP               = 0x8513;\nconst TEXTURE_3D                     = 0x806f;\nconst TEXTURE_2D_ARRAY               = 0x8c1a;\n\n/* Cubemap Targets */\nconst TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\nconst TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\nconst TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\nconst TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\nconst TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851a;\n\n/* Texture Parameters */\nconst TEXTURE_MIN_FILTER             = 0x2801;\nconst TEXTURE_MAG_FILTER             = 0x2800;\nconst TEXTURE_WRAP_S                 = 0x2802;\nconst TEXTURE_WRAP_T                 = 0x2803;\nconst TEXTURE_WRAP_R                 = 0x8072;\nconst TEXTURE_MIN_LOD                = 0x813a;\nconst TEXTURE_MAX_LOD                = 0x813b;\nconst TEXTURE_BASE_LEVEL             = 0x813c;\nconst TEXTURE_MAX_LEVEL              = 0x813d;\n\n\n/* Pixel store */\nconst UNPACK_ALIGNMENT                   = 0x0cf5;\nconst UNPACK_ROW_LENGTH                  = 0x0cf2;\nconst UNPACK_IMAGE_HEIGHT                = 0x806e;\nconst UNPACK_SKIP_PIXELS                 = 0x0cf4;\nconst UNPACK_SKIP_ROWS                   = 0x0cf3;\nconst UNPACK_SKIP_IMAGES                 = 0x806d;\nconst UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\nconst UNPACK_PREMULTIPLY_ALPHA_WEBGL     = 0x9241;\nconst UNPACK_FLIP_Y_WEBGL                = 0x9240;\n\nconst R8                           = 0x8229;\nconst R8_SNORM                     = 0x8F94;\nconst R16F                         = 0x822D;\nconst R32F                         = 0x822E;\nconst R8UI                         = 0x8232;\nconst R8I                          = 0x8231;\nconst RG16UI                       = 0x823A;\nconst RG16I                        = 0x8239;\nconst RG32UI                       = 0x823C;\nconst RG32I                        = 0x823B;\nconst RG8                          = 0x822B;\nconst RG8_SNORM                    = 0x8F95;\nconst RG16F                        = 0x822F;\nconst RG32F                        = 0x8230;\nconst RG8UI                        = 0x8238;\nconst RG8I                         = 0x8237;\nconst R16UI                        = 0x8234;\nconst R16I                         = 0x8233;\nconst R32UI                        = 0x8236;\nconst R32I                         = 0x8235;\nconst RGB8                         = 0x8051;\nconst SRGB8                        = 0x8C41;\nconst RGB565                       = 0x8D62;\nconst RGB8_SNORM                   = 0x8F96;\nconst R11F_G11F_B10F               = 0x8C3A;\nconst RGB9_E5                      = 0x8C3D;\nconst RGB16F                       = 0x881B;\nconst RGB32F                       = 0x8815;\nconst RGB8UI                       = 0x8D7D;\nconst RGB8I                        = 0x8D8F;\nconst RGB16UI                      = 0x8D77;\nconst RGB16I                       = 0x8D89;\nconst RGB32UI                      = 0x8D71;\nconst RGB32I                       = 0x8D83;\nconst RGBA8                        = 0x8058;\nconst SRGB8_ALPHA8                 = 0x8C43;\nconst RGBA8_SNORM                  = 0x8F97;\nconst RGB5_A1                      = 0x8057;\nconst RGBA4                        = 0x8056;\nconst RGB10_A2                     = 0x8059;\nconst RGBA16F                      = 0x881A;\nconst RGBA32F                      = 0x8814;\nconst RGBA8UI                      = 0x8D7C;\nconst RGBA8I                       = 0x8D8E;\nconst RGB10_A2UI                   = 0x906F;\nconst RGBA16UI                     = 0x8D76;\nconst RGBA16I                      = 0x8D88;\nconst RGBA32I                      = 0x8D82;\nconst RGBA32UI                     = 0x8D70;\n\nconst DEPTH_COMPONENT16            = 0x81A5;\nconst DEPTH_COMPONENT24            = 0x81A6;\nconst DEPTH_COMPONENT32F           = 0x8CAC;\nconst DEPTH32F_STENCIL8            = 0x8CAD;\nconst DEPTH24_STENCIL8             = 0x88F0;\n\n/* DataType */\nconst BYTE                         = 0x1400;\nconst UNSIGNED_BYTE                = 0x1401;\nconst SHORT                        = 0x1402;\nconst UNSIGNED_SHORT               = 0x1403;\nconst INT                          = 0x1404;\nconst UNSIGNED_INT                 = 0x1405;\nconst FLOAT                        = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst HALF_FLOAT_OES               = 0x8D61;  // Thanks Khronos for making this different >:(\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst RG                           = 0x8227;\nconst RG_INTEGER                   = 0x8228;\nconst RED                          = 0x1903;\nconst RED_INTEGER                  = 0x8D94;\nconst RGB_INTEGER                  = 0x8D98;\nconst RGBA_INTEGER                 = 0x8D99;\n\nconst formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  const f = formatInfo;\n  f[ALPHA]           = { numColorComponents: 1, };\n  f[LUMINANCE]       = { numColorComponents: 1, };\n  f[LUMINANCE_ALPHA] = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RED]             = { numColorComponents: 1, };\n  f[RED_INTEGER]     = { numColorComponents: 1, };\n  f[RG]              = { numColorComponents: 2, };\n  f[RG_INTEGER]      = { numColorComponents: 2, };\n  f[RGB]             = { numColorComponents: 3, };\n  f[RGB_INTEGER]     = { numColorComponents: 3, };\n  f[RGBA]            = { numColorComponents: 4, };\n  f[RGBA_INTEGER]    = { numColorComponents: 4, };\n  f[DEPTH_COMPONENT] = { numColorComponents: 1, };\n  f[DEPTH_STENCIL]   = { numColorComponents: 2, };\n}\n\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to texImage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nlet s_textureInternalFormatInfo;\nfunction getTextureInternalFormatInfo(internalFormat) {\n  if (!s_textureInternalFormatInfo) {\n    // NOTE: these properties need unique names so we can let Uglify mangle the name.\n    const t = {};\n    // unsized formats\n    t[ALPHA]              = { textureFormat: ALPHA,           colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[LUMINANCE]          = { textureFormat: LUMINANCE,       colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1, 2, 2, 4],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[LUMINANCE_ALPHA]    = { textureFormat: LUMINANCE_ALPHA, colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2, 4, 4, 8],        type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT], };\n    t[RGB]                = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 6, 6, 12, 2],    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5], };\n    t[RGBA]               = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 8, 8, 16, 2, 2], type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1], };\n\n    // sized formats\n    t[R8]                 = { textureFormat: RED,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [1],        type: [UNSIGNED_BYTE], };\n    t[R8_SNORM]           = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [1],        type: [BYTE], };\n    t[R16F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [4, 2],     type: [FLOAT, HALF_FLOAT], };\n    t[R32F]               = { textureFormat: RED,             colorRenderable: false, textureFilterable: false, bytesPerElement: [4],        type: [FLOAT], };\n    t[R8UI]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [UNSIGNED_BYTE], };\n    t[R8I]                = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [1],        type: [BYTE], };\n    t[R16UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_SHORT], };\n    t[R16I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [SHORT], };\n    t[R32UI]              = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT], };\n    t[R32I]               = { textureFormat: RED_INTEGER,     colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [INT], };\n    t[RG8]                = { textureFormat: RG,              colorRenderable: true,  textureFilterable: true,  bytesPerElement: [2],        type: [UNSIGNED_BYTE], };\n    t[RG8_SNORM]          = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [2],        type: [BYTE], };\n    t[RG16F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: true,  bytesPerElement: [8, 4],     type: [FLOAT, HALF_FLOAT], };\n    t[RG32F]              = { textureFormat: RG,              colorRenderable: false, textureFilterable: false, bytesPerElement: [8],        type: [FLOAT], };\n    t[RG8UI]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [UNSIGNED_BYTE], };\n    t[RG8I]               = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [2],        type: [BYTE], };\n    t[RG16UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_SHORT], };\n    t[RG16I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [SHORT], };\n    t[RG32UI]             = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_INT], };\n    t[RG32I]              = { textureFormat: RG_INTEGER,      colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [INT], };\n    t[RGB8]               = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[SRGB8]              = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[RGB565]             = { textureFormat: RGB,             colorRenderable: true,  textureFilterable: true,  bytesPerElement: [3, 2],     type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5], };\n    t[RGB8_SNORM]         = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [3],        type: [BYTE], };\n    t[R11F_G11F_B10F]     = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV], };\n    t[RGB9_E5]            = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6, 4], type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV], };\n    t[RGB16F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: true,  bytesPerElement: [12, 6],    type: [FLOAT, HALF_FLOAT], };\n    t[RGB32F]             = { textureFormat: RGB,             colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [FLOAT], };\n    t[RGB8UI]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [UNSIGNED_BYTE], };\n    t[RGB8I]              = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [3],        type: [BYTE], };\n    t[RGB16UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [UNSIGNED_SHORT], };\n    t[RGB16I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [6],        type: [SHORT], };\n    t[RGB32UI]            = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [UNSIGNED_INT], };\n    t[RGB32I]             = { textureFormat: RGB_INTEGER,     colorRenderable: false, textureFilterable: false, bytesPerElement: [12],       type: [INT], };\n    t[RGBA8]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[SRGB8_ALPHA8]       = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[RGBA8_SNORM]        = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [4],        type: [BYTE], };\n    t[RGB5_A1]            = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2, 4],  type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA4]              = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4, 2],     type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4], };\n    t[RGB10_A2]           = { textureFormat: RGBA,            colorRenderable: true,  textureFilterable: true,  bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: true,  bytesPerElement: [16, 8],    type: [FLOAT, HALF_FLOAT], };\n    t[RGBA32F]            = { textureFormat: RGBA,            colorRenderable: false, textureFilterable: false, bytesPerElement: [16],       type: [FLOAT], };\n    t[RGBA8UI]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_BYTE], };\n    t[RGBA8I]             = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [BYTE], };\n    t[RGB10_A2UI]         = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_2_10_10_10_REV], };\n    t[RGBA16UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [UNSIGNED_SHORT], };\n    t[RGBA16I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [8],        type: [SHORT], };\n    t[RGBA32I]            = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [INT], };\n    t[RGBA32UI]           = { textureFormat: RGBA_INTEGER,    colorRenderable: true,  textureFilterable: false, bytesPerElement: [16],       type: [UNSIGNED_INT], };\n    // Sized Internal\n    t[DEPTH_COMPONENT16]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [2, 4],     type: [UNSIGNED_SHORT, UNSIGNED_INT], };\n    t[DEPTH_COMPONENT24]  = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT], };\n    t[DEPTH_COMPONENT32F] = { textureFormat: DEPTH_COMPONENT, colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT], };\n    t[DEPTH24_STENCIL8]   = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [UNSIGNED_INT_24_8], };\n    t[DEPTH32F_STENCIL8]  = { textureFormat: DEPTH_STENCIL,   colorRenderable: true,  textureFilterable: false, bytesPerElement: [4],        type: [FLOAT_32_UNSIGNED_INT_24_8_REV], };\n\n    Object.keys(t).forEach(function(internalFormat) {\n      const info = t[internalFormat];\n      info.bytesPerElementMap = {};\n      info.bytesPerElement.forEach(function(bytesPerElement, ndx) {\n        const type = info.type[ndx];\n        info.bytesPerElementMap[type] = bytesPerElement;\n      });\n    });\n    s_textureInternalFormatInfo = t;\n  }\n  return s_textureInternalFormatInfo[internalFormat];\n}\n\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  const bytesPerElement = info.bytesPerElementMap[type];\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n  return bytesPerElement;\n}\n\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return {\n    format: info.textureFormat,\n    type: info.type[0],\n  };\n}\n\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\nfunction isPowerOf2(value) {\n  return (value & (value - 1)) === 0;\n}\n\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number} width The width parameter from texImage2D etc..\n * @param {number} height The height parameter from texImage2D etc..\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canGenerateMipmap(gl, width, height, internalFormat) {\n  if (!utils.isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.colorRenderable && info.textureFilterable;\n}\n\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\nfunction canFilter(internalFormat) {\n  const info = getTextureInternalFormatInfo(internalFormat);\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n  return info.textureFilterable;\n}\n\n/**\n * Gets the number of components for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\nfunction getNumComponentsForFormat(format) {\n  const info = formatInfo[format];\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n  return info.numColorComponents;\n}\n\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return typedArrays.getGLTypeForTypedArray(src);\n  }\n  return defaultType || UNSIGNED_BYTE;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n  if (!width && !height) {\n    const size = Math.sqrt(numElements / (target === TEXTURE_CUBE_MAP ? 6 : 1));\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n  return {\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\nfunction setDefaultTextureColor(color) {\n  defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediately. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then each entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n\n// NOTE: While querying GL is considered slow it's not remotely as slow\n// as uploading a texture. On top of that you're unlikely to call this in\n// a perf critical loop. Even if upload a texture every frame that's unlikely\n// to be more than 1 or 2 textures a frame. In other words, the benefits of\n// making the API easy to use outweigh any supposed perf benefits\n//\n// Also note I get that having one global of these is bad practice.\n// As long as it's used correctly it means no garbage which probably\n// doesn't matter when dealing with textures but old habits die hard.\nconst lastPackState = {};\n\n/**\n * Saves any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction savePackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    lastPackState.colorspaceConversion = gl.getParameter(UNPACK_COLORSPACE_CONVERSION_WEBGL);\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    lastPackState.premultiplyAlpha = gl.getParameter(UNPACK_PREMULTIPLY_ALPHA_WEBGL);\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    lastPackState.flipY = gl.getParameter(UNPACK_FLIP_Y_WEBGL);\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n\n/**\n * Restores any packing state that was set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction restorePackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorspaceConversion);\n  }\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);\n  }\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);\n  }\n}\n\n/**\n * Saves state related to data size\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction saveSkipState(gl) {\n  lastPackState.unpackAlignment   = gl.getParameter(UNPACK_ALIGNMENT);\n  if (utils.isWebGL2(gl)) {\n    lastPackState.unpackRowLength   = gl.getParameter(UNPACK_ROW_LENGTH);\n    lastPackState.unpackImageHeight = gl.getParameter(UNPACK_IMAGE_HEIGHT);\n    lastPackState.unpackSkipPixels  = gl.getParameter(UNPACK_SKIP_PIXELS);\n    lastPackState.unpackSkipRows    = gl.getParameter(UNPACK_SKIP_ROWS);\n    lastPackState.unpackSkipImages  = gl.getParameter(UNPACK_SKIP_IMAGES);\n  }\n}\n\n/**\n * Restores state related to data size\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\nfunction restoreSkipState(gl) {\n  gl.pixelStorei(UNPACK_ALIGNMENT,    lastPackState.unpackAlignment);\n  if (utils.isWebGL2(gl)) {\n    gl.pixelStorei(UNPACK_ROW_LENGTH,   lastPackState.unpackRowLength);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, lastPackState.unpackImageHeight);\n    gl.pixelStorei(UNPACK_SKIP_PIXELS,  lastPackState.unpackSkipPixels);\n    gl.pixelStorei(UNPACK_SKIP_ROWS,    lastPackState.unpackSkipRows);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES,  lastPackState.unpackSkipImages);\n  }\n}\n\n\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParameteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.minMag);\n  }\n  if (options.min) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_FILTER, options.min);\n  }\n  if (options.mag) {\n    parameteriFn.call(gl, target, TEXTURE_MAG_FILTER, options.mag);\n  }\n  if (options.wrap) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrap);\n    if (target === TEXTURE_3D || helper.isSampler(gl, target)) {\n      parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_R, options.wrapR);\n  }\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_S, options.wrapS);\n  }\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, TEXTURE_WRAP_T, options.wrapT);\n  }\n  if (options.minLod) {\n    parameteriFn.call(gl, target, TEXTURE_MIN_LOD, options.minLod);\n  }\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LOD, options.maxLod);\n  }\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureParameters(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\nfunction createSampler(gl, options) {\n  const sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\nfunction createSamplers(gl, samplerOptions) {\n  const samplers = {};\n  Object.keys(samplerOptions).forEach(function(name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\nfunction make1Pixel(color) {\n  color = color || defaults.textureColor;\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @memberOf module:twgl/textures\n */\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat) {\n  options = options || defaults.textureOptions;\n  internalFormat = internalFormat || RGBA;\n  const target = options.target || TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n  if (canGenerateMipmap(gl, width, height, internalFormat)) {\n    gl.generateMipmap(target);\n  } else {\n    const filtering = canFilter(internalFormat) ? LINEAR : NEAREST;\n    gl.texParameteri(target, TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || (options.auto === undefined && options.level === undefined);\n}\n\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [\n      TEXTURE_CUBE_MAP_POSITIVE_X,\n      TEXTURE_CUBE_MAP_NEGATIVE_X,\n      TEXTURE_CUBE_MAP_POSITIVE_Y,\n      TEXTURE_CUBE_MAP_NEGATIVE_Y,\n      TEXTURE_CUBE_MAP_POSITIVE_Z,\n      TEXTURE_CUBE_MAP_NEGATIVE_Z,\n    ];\n}\n\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundant but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\nfunction getCubeFacesWithNdx(gl, options) {\n  const faces = getCubeFaceOrder(gl, options);\n  // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n  const facesWithNdx = faces.map(function(face, ndx) {\n    return { face: face, ndx: ndx };\n  });\n  facesWithNdx.sort(function(a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  const level = options.level || 0;\n  let width = element.width;\n  let height = element.height;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  savePackState(gl, options);\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // guess the parts\n    const imgWidth  = element.width;\n    const imgHeight = element.height;\n    let size;\n    let slices;\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n    const ctx = getShared2DContext();\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      });\n      // Free up the canvas memory\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function(f) {\n        const xOffset = slices[f.ndx * 2 + 0] * size;\n        const yOffset = slices[f.ndx * 2 + 1] * size;\n        // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be un-renderable.\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none',\n        })\n        .then(function(imageBitmap) {\n          savePackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          restorePackState(gl, options);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n          }\n        });\n      });\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    const smallest = Math.min(element.width, element.height);\n    const largest = Math.max(element.width, element.height);\n    const depth = largest / smallest;\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n    const xMult = element.width  === largest ? 1 : 0;\n    const yMult = element.height === largest ? 1 : 0;\n    saveSkipState(gl);\n    gl.pixelStorei(UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n    for (let d = 0; d < depth; ++d) {\n      const srcX = d * smallest * xMult;\n      const srcY = d * smallest * yMult;\n      gl.pixelStorei(UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n    restoreSkipState(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n  restorePackState(gl, options);\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {\n}\n\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    const a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname &&\n           a.port     === location.port &&\n           a.protocol === location.protocol;\n  } else {\n    const localOrigin = (new URL(location.href)).origin;\n    const urlOrigin = (new URL(url, location.href)).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url)\n     ? 'anonymous'\n     : crossOrigin;\n}\n\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  let img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    const clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError);  // eslint-disable-line\n      img.removeEventListener('load', onLoad);  // eslint-disable-line\n      img = null;\n    };\n\n    const onError = function onError() {\n      const msg = \"couldn't load image: \" + url;\n      helper.error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    const onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    let err;\n    let bm;\n    const cb = function cb() {\n      callback(err, bm);\n    };\n\n    const options = {};\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n    fetch(url, options).then(function(response) {\n      if (!response.ok) {\n        throw response;\n      }\n      return response.blob();\n    }).then(function(blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none',\n      });\n    }).then(function(bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function(e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n  return img;\n}\n\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\nfunction isTexImageSource(obj) {\n  return (typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap) ||\n         (typeof ImageData !== 'undefined'  && obj instanceof ImageData) ||\n         (typeof HTMLElement !== 'undefined'  && obj instanceof HTMLElement);\n}\n\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function() {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  if (options.color === false) {\n    return;\n  }\n  // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n  const color = make1Pixel(options.color);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, RGBA, 1, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n  } else {\n    gl.texImage2D(target, 0, RGBA, 1, 1, 0, RGBA, UNSIGNED_BYTE, color);\n  }\n}\n\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} source image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as appropriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  const img = loadAndUseImage(options.src, options.crossOrigin, function(err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE;\n  const target = options.target || TEXTURE_2D;\n  if (target !== TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = 6;\n  const errors = [];\n  const faces = getCubeFaceOrder(gl, options);\n  let imgs;  // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          savePackState(gl, options);\n          gl.bindTexture(target, tex);\n\n          // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder(gl).forEach(function(otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          restorePackState(gl, options);\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  const urls = options.src;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || UNSIGNED_BYTE;\n  const target = options.target || TEXTURE_2D_ARRAY;\n  if (target !== TEXTURE_3D && target !== TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n  setTextureTo1PixelColor(gl, tex, options);\n  // Because it's async we need to copy the options.\n  options = Object.assign({}, options);\n  let numToLoad = urls.length;\n  const errors = [];\n  let imgs;  // eslint-disable-line\n  const level = options.level || 0;\n  let width = options.width;\n  let height = options.height;\n  const depth = urls.length;\n  let firstImage = true;\n\n  function uploadImg(slice) {\n    return function(err, img) {\n      --numToLoad;\n      if (err) {\n        errors.push(err);\n      } else {\n        savePackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n\n          // put it in every slice otherwise some slices will be 0,0,0,0\n          for (let s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          let src = img;\n          let ctx;\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            ctx = getShared2DContext();\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src);\n\n          // free the canvas memory\n          if (ctx && src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        restorePackState(gl, options);\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function(url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults.textureOptions;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  let width = options.width;\n  let height = options.height;\n  let depth = options.depth;\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  if (!isArrayBuffer(src)) {\n    const Type = typedArrays.getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  const bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  const numElements = src.byteLength / bytesPerElement;  // TODO: check UNPACK_ALIGNMENT?\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + utils.glEnumToString(gl, format);\n  }\n  let dimensions;\n  if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    if (!width && !height && !depth) {\n      const size = Math.cbrt(numElements);\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n  saveSkipState(gl);\n  gl.pixelStorei(UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  savePackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    const elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    const faceSize = numElements / 6 * elementsPerElement;\n\n    getCubeFacesWithNdx(gl, options).forEach(f => {\n      const offset = faceSize * f.ndx;\n      const data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n  restorePackState(gl, options);\n  restoreSkipState(gl);\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type,\n  };\n}\n\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\nfunction setEmptyTexture(gl, tex, options) {\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  const type = options.type || formatType.type;\n  savePackState(gl, options);\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n  restorePackState(gl, options);\n}\n\n/**\n * Creates a texture based on the options passed in.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  const tex = gl.createTexture();\n  const target = options.target || TEXTURE_2D;\n  let width  = options.width  || 1;\n  let height = options.height || 1;\n  const internalFormat = options.internalFormat || RGBA;\n  gl.bindTexture(target, tex);\n  if (target === TEXTURE_CUBE_MAP) {\n    // this should have been the default for cubemaps :(\n    gl.texParameteri(target, TEXTURE_WRAP_S, CLAMP_TO_EDGE);\n    gl.texParameteri(target, TEXTURE_WRAP_T, CLAMP_TO_EDGE);\n  }\n  let src = options.src;\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n    if (typeof (src) === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) ||\n               (Array.isArray(src) && (\n                    typeof src[0] === 'number' ||\n                    Array.isArray(src[0]) ||\n                    isArrayBuffer(src[0]))\n               )\n              ) {\n      const dimensions = setTextureFromArray(gl, tex, src, options);\n      width  = dimensions.width;\n      height = dimensions.height;\n    } else if (Array.isArray(src) && (typeof (src[0]) === 'string' || isTexImageSource(src[0]))) {\n      if (target === TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else if (isTexImageSource(src)) {\n      setTextureFromElement(gl, tex, src, options);\n      width  = src.width;\n      height = src.height;\n    } else {\n      throw \"unsupported src type\";\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat);\n  }\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @param {number} [depth] the new depth. If not passed in will use `options.depth`\n * @memberOf module:twgl/textures\n */\nfunction resizeTexture(gl, tex, options, width, height, depth) {\n  width = width || options.width;\n  height = height || options.height;\n  depth = depth || options.depth;\n  const target = options.target || TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  const level = options.level || 0;\n  const internalFormat = options.internalFormat || options.format || RGBA;\n  const formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  const format = options.format || formatType.format;\n  let type;\n  const src = options.src;\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n  if (target === TEXTURE_CUBE_MAP) {\n    for (let ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else if (target === TEXTURE_3D || target === TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' ||\n         (Array.isArray(src) && typeof src[0] === 'string');\n}\n\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  let numDownloading = 0;\n  const errors = [];\n  const textures = {};\n  const images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function() {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function(name) {\n    const options = textureOptions[name];\n    let onLoadFn;\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n        if (err) {\n          errors.push(err);\n        }\n        callCallbackIfReady();\n      };\n      ++numDownloading;\n    }\n    textures[name] = createTexture(gl, options, onLoadFn);\n  });\n\n  // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n  callCallbackIfReady();\n\n  return textures;\n}\n\nexport {\n  setDefaults as setTextureDefaults_,\n\n  createSampler,\n  createSamplers,\n  setSamplerParameters,\n\n  createTexture,\n  setEmptyTexture,\n  setTextureFromArray,\n  loadTextureFromUrl,\n  setTextureFromElement,\n  setTextureFilteringForSize,\n  setTextureParameters,\n  setDefaultTextureColor,\n  createTextures,\n  resizeTexture,\n\n  canGenerateMipmap,\n  canFilter,\n  getNumComponentsForFormat,\n  getBytesPerElementForInternalFormat,\n  getFormatAndTypeForInternalFormat,\n};\n\n","export * from './twgl.js';\n\n\n\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as attributes from './attributes.js';\nimport * as textures from './textures.js';\nimport * as helper from './helper.js';\nimport * as utils from './utils.js';\n\nimport * as draw from './draw.js';\nimport * as framebuffers from './framebuffers.js';\nimport * as programs from './programs.js';\nimport * as typedarrays from './typedarrays.js';\nimport * as vertexArrays from './vertex-arrays.js';\n\n/**\n * The main TWGL module.\n *\n * For most use cases you shouldn't need anything outside this module.\n * Exceptions between the stuff added to twgl-full (v3, m4, primitives)\n *\n * @module twgl\n * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray\n * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays\n * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo\n * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo\n * @borrows module:twgl/draw.drawObjectList as drawObjectList\n * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo\n * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo\n * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo\n * @borrows module:twgl/programs.createProgramInfo as createProgramInfo\n * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo\n * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock\n * @borrows module:twgl/programs.setUniformBlock as setUniformBlock\n * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms\n * @borrows module:twgl/programs.setUniforms as setUniforms\n * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes\n * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray\n * @borrows module:twgl/textures.createTexture as createTexture\n * @borrows module:twgl/textures.resizeTexture as resizeTexture\n * @borrows module:twgl/textures.createTextures as createTextures\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */ /* lgtm [js/unused-local-variable] */\nconst defaults = {\n  addExtensionsToContext: true,\n};\n\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using un-prefixed names.\n *\n *   In other words I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  attributes.setAttributeDefaults_(newDefaults);  // eslint-disable-line\n  textures.setTextureDefaults_(newDefaults);  // eslint-disable-line\n}\n\nconst prefixRE = /^(.*?)_/;\nfunction addExtensionToContext(gl, extensionName) {\n  utils.glEnumToString(gl, 0);\n  const ext = gl.getExtension(extensionName);\n  if (ext) {\n    const enums = {};\n    const fnSuffix = prefixRE.exec(extensionName)[1];\n    const enumSuffix = '_' + fnSuffix;\n    for (const key in ext) {\n      const value = ext[key];\n      const isFunc = typeof (value) === 'function';\n      const suffix = isFunc ? fnSuffix : enumSuffix;\n      let name = key;\n      // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          helper.warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function(origFn) {\n            return function() {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    }\n    // pass the modified enums to glEnumToString\n    enums.constructor = {\n      name: ext.constructor.name,\n    };\n    utils.glEnumToString(enums, 0);\n  }\n  return ext;\n}\n\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\nconst supportedExtensions = [\n  'ANGLE_instanced_arrays',\n  'EXT_blend_minmax',\n  'EXT_color_buffer_float',\n  'EXT_color_buffer_half_float',\n  'EXT_disjoint_timer_query',\n  'EXT_disjoint_timer_query_webgl2',\n  'EXT_frag_depth',\n  'EXT_sRGB',\n  'EXT_shader_texture_lod',\n  'EXT_texture_filter_anisotropic',\n  'OES_element_index_uint',\n  'OES_standard_derivatives',\n  'OES_texture_float',\n  'OES_texture_float_linear',\n  'OES_texture_half_float',\n  'OES_texture_half_float_linear',\n  'OES_vertex_array_object',\n  'WEBGL_color_buffer_float',\n  'WEBGL_compressed_texture_atc',\n  'WEBGL_compressed_texture_etc1',\n  'WEBGL_compressed_texture_pvrtc',\n  'WEBGL_compressed_texture_s3tc',\n  'WEBGL_compressed_texture_s3tc_srgb',\n  'WEBGL_depth_texture',\n  'WEBGL_draw_buffers',\n];\n\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existence of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\nfunction addExtensionsToContext(gl) {\n  for (let ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\nfunction create3DContext(canvas, opt_attribs) {\n  const names = [\"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getWebGLContext(canvas, opt_attribs) {\n  const gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\nfunction createContext(canvas, opt_attribs) {\n  const names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  let context = null;\n  for (let ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n      break;\n    }\n  }\n  return context;\n}\n\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\nfunction getContext(canvas, opt_attribs) {\n  const gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  const width  = canvas.clientWidth  * multiplier | 0;\n  const height = canvas.clientHeight * multiplier | 0;\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n  return false;\n}\n\nexport {\n  addExtensionsToContext,\n  getContext,\n  getWebGLContext,\n  resizeCanvasToDisplaySize,\n  setDefaults,\n\n  attributes,\n  draw,\n  framebuffers,\n  programs,\n  textures,\n  typedarrays,\n  utils,\n  vertexArrays,\n};\n\n// function notPrivate(name) {\n//   return name[name.length - 1] !== '_';\n// }\n//\n// function copyPublicProperties(src, dst) {\n//   Object.keys(src).filter(notPrivate).forEach(function(key) {\n//     dst[key] = src[key];\n//   });\n//   return dst;\n// }\n\nexport * from './attributes.js';\nexport * from './draw.js';\nexport * from './framebuffers.js';\nexport * from './programs.js';\nexport * from './textures.js';\nexport * from './typedarrays.js';\nexport * from './utils.js';\nexport * from './vertex-arrays.js';\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader typed array related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.typedArray` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/typedArray\n */\n\n// make sure we don't see a global gl\nconst gl = undefined;  /* eslint-disable-line */ /* lgtm [js/unused-local-variable] */\n\n/* DataType */\nconst BYTE                           = 0x1400;\nconst UNSIGNED_BYTE                  = 0x1401;\nconst SHORT                          = 0x1402;\nconst UNSIGNED_SHORT                 = 0x1403;\nconst INT                            = 0x1404;\nconst UNSIGNED_INT                   = 0x1405;\nconst FLOAT                          = 0x1406;\nconst UNSIGNED_SHORT_4_4_4_4       = 0x8033;\nconst UNSIGNED_SHORT_5_5_5_1       = 0x8034;\nconst UNSIGNED_SHORT_5_6_5         = 0x8363;\nconst HALF_FLOAT                   = 0x140B;\nconst UNSIGNED_INT_2_10_10_10_REV  = 0x8368;\nconst UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nconst UNSIGNED_INT_5_9_9_9_REV     = 0x8C3E;\nconst FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nconst UNSIGNED_INT_24_8            = 0x84FA;\n\nconst glTypeToTypedArray = {};\n{\n  const tt = glTypeToTypedArray;\n  tt[BYTE]                           = Int8Array;\n  tt[UNSIGNED_BYTE]                  = Uint8Array;\n  tt[SHORT]                          = Int16Array;\n  tt[UNSIGNED_SHORT]                 = Uint16Array;\n  tt[INT]                            = Int32Array;\n  tt[UNSIGNED_INT]                   = Uint32Array;\n  tt[FLOAT]                          = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1]         = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5]           = Uint16Array;\n  tt[HALF_FLOAT]                     = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV]    = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV]   = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV]       = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8]              = Uint32Array;\n}\n\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array)         { return BYTE; }           // eslint-disable-line\n  if (typedArrayType === Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line\n  if (typedArrayType === Int16Array)        { return SHORT; }          // eslint-disable-line\n  if (typedArrayType === Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line\n  if (typedArrayType === Int32Array)        { return INT; }            // eslint-disable-line\n  if (typedArrayType === Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line\n  if (typedArrayType === Float32Array)      { return FLOAT; }          // eslint-disable-line\n  throw new Error('unsupported typed array type');\n}\n\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\nfunction getTypedArrayTypeForGLType(type) {\n  const CTOR = glTypeToTypedArray[type];\n  if (!CTOR) {\n    throw new Error('unknown gl type');\n  }\n  return CTOR;\n}\n\nconst isArrayBuffer = typeof SharedArrayBuffer !== 'undefined'\n  ? function isArrayBufferOrSharedArrayBuffer(a) {\n    return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n  }\n  : function isArrayBuffer(a) {\n    return a && a.buffer && a.buffer instanceof ArrayBuffer;\n  };\n\nexport {\n  getGLTypeForTypedArray,\n  getGLTypeForTypedArrayType,\n  getTypedArrayTypeForGLType,\n  isArrayBuffer,\n};\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\nconst glEnumToString = (function() {\n  const haveEnumsForType = {};\n  const enums = {};\n\n  function addEnums(gl) {\n    const type = gl.constructor.name;\n    if (!haveEnumsForType[type]) {\n      for (const key in gl) {\n        if (typeof gl[key] === 'number') {\n          const existing = enums[gl[key]];\n          enums[gl[key]] = existing ? `${existing} | ${key}` : key;\n        }\n      }\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || (\"0x\" + value.toString(16));\n  };\n}());\n\nexport {\n  glEnumToString,\n  isWebGL1,\n  isWebGL2,\n};\n\n\n","/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport * as programs from './programs.js';\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibility they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\nconst ELEMENT_ARRAY_BUFFER           = 0x8893;\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n  programInfos.forEach(function(programInfo) {\n    programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao,\n  };\n}\n\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  const vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  programs.setAttributes(setters, attribs);\n  if (indices) {\n    gl.bindBuffer(ELEMENT_ARRAY_BUFFER, indices);\n  }\n  // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n  gl.bindVertexArray(null);\n  return vao;\n}\n\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\nexport {\n  createVertexArrayInfo,\n  createVAOAndSetAttributes,\n  createVAOFromBufferInfo,\n};\n\n"],"sourceRoot":""}